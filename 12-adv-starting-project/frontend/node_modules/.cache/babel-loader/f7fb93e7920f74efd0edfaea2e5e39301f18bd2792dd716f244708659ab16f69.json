{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\asank\\\\OneDrive\\\\Desktop\\\\React\\\\Route advance\\\\12-adv-starting-project\\\\12-adv-starting-project\\\\frontend\\\\src\\\\pages\\\\Events.js\",\n  _s = $RefreshSig$();\nimport { useLoaderData } from \"react-router-dom\";\nimport EventsList from \"../components/EventsList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  const data = useLoaderData();\n  if (data.isError) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: data.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 12\n    }, this);\n  }\n  const event = data.events;\n  return /*#__PURE__*/_jsxDEV(EventsList, {\n    events: events\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 10\n  }, this);\n}\n_s(EventsPage, \"5thj+e1edPyRpKif1JmVRC6KArE=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nexport async function loader() {\n  const response = await fetch(\"http://localhost:8080/events\");\n  if (!response.ok) {\n    //..\n    return {\n      isError: true,\n      message: 'Could not fetch events.'\n    };\n  } else {\n    return response;\n  }\n}\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["useLoaderData","EventsList","EventsPage","data","isError","message","event","events","loader","response","fetch","ok"],"sources":["C:/Users/asank/OneDrive/Desktop/React/Route advance/12-adv-starting-project/12-adv-starting-project/frontend/src/pages/Events.js"],"sourcesContent":["import { useLoaderData } from \"react-router-dom\";\r\nimport EventsList from \"../components/EventsList\";\r\n\r\nfunction EventsPage() {\r\n    const data=useLoaderData();\r\n if(data.isError){\r\n    return <p>{data.message}</p>\r\n }\r\n const event=data.events;\r\n  return <EventsList events={events} />;\r\n}\r\n\r\nexport default EventsPage;\r\n\r\nexport async function loader() {\r\n  const response = await fetch(\"http://localhost:8080/events\");\r\n\r\n  if (!response.ok) {\r\n    //..\r\n    return {isError:true,message:'Could not fetch events.'}\r\n  } else {\r\n   return response;\r\n  }\r\n}\r\n"],"mappings":";;AAAA,SAASA,aAAa,QAAQ,kBAAkB;AAChD,OAAOC,UAAU,MAAM,0BAA0B;AAAC;AAElD,SAASC,UAAU,GAAG;EAAA;EAClB,MAAMC,IAAI,GAACH,aAAa,EAAE;EAC7B,IAAGG,IAAI,CAACC,OAAO,EAAC;IACb,oBAAO;MAAA,UAAID,IAAI,CAACE;IAAO;MAAA;MAAA;MAAA;IAAA,QAAK;EAC/B;EACA,MAAMC,KAAK,GAACH,IAAI,CAACI,MAAM;EACtB,oBAAO,QAAC,UAAU;IAAC,MAAM,EAAEA;EAAO;IAAA;IAAA;IAAA;EAAA,QAAG;AACvC;AAAC,GAPQL,UAAU;EAAA,QACJF,aAAa;AAAA;AAAA,KADnBE,UAAU;AASnB,eAAeA,UAAU;AAEzB,OAAO,eAAeM,MAAM,GAAG;EAC7B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB;IACA,OAAO;MAACP,OAAO,EAAC,IAAI;MAACC,OAAO,EAAC;IAAyB,CAAC;EACzD,CAAC,MAAM;IACN,OAAOI,QAAQ;EAChB;AACF;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}